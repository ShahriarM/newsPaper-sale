str(sleepstudy)
library(lme4)
str(sleepstudy)
sleepystudy
sleepstudy
fm1 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
fm1
install.packages("plm")
Cigar
cigar
data(Cigar)
library(plm)
Cigar
data(Cigar)
Cigar
str(Cigar)
head(Cigar)
exit
N    <- 20                               # generate some data
y1   <- rnorm(N, 175, 7)                 # criterion 1
y2   <- rnorm(N,  30, 8)                 # criterion 2
x    <- 0.5*y1 - 0.3*y2 + rnorm(N, 0, 3) # predictor
y1[c(1, 3,  5)] <- NA                    # some NA values
y2[c(7, 9, 11)] <- NA                    # some other NA values
Y    <- cbind(y1, y2)                    # matrix for multivariate regression
Y
x
fitO <- lm(Y ~ x, na.action=na.omit)     # fit with na.omit
fit)
fit0
fito
fitO
dim(residuals(fitO))
fitE <- lm(Y ~ x, na.action=na.exclude)
dim(residuals(fitE))
residuals(fitE)
residuals(fitO)
residuals(fitE)
library('plyr')
library('dplyr')
library('plyr')
132694/132724
install.packages("H:\\R-codes\\for_rjags\\tempo4\\rjagsSH_",
lib= "H:\\R-codes\\for_rjags\\test", repos = NULL,
type="source" )
env
env()
Env()
install.packages("glmnet", lib="C:/R/R-3.1.1/library")
librray(glmnet)
libraray(glmnet)
library(glmnet)
load("QuickStartExample.RData")
ls
ps
data("QuickStartExample.RData")
library(glmnet)
read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",
sep=",",head=T,row.names=1)
SAheart <- read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",
sep=",",head=T,row.names=1)
head(SAheart)
dim(SAheart)
fit = glmnet( SAheart[1:9,], SAheart[10,])
SAheart[1:9,]
fit = glmnet( SAheart[,1:9], SAheart[,10])
SAheart$famhist <- SAheart$famhist ==1
head(SAheart)
SAheart <- read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",
sep=",",head=T,row.names=1)
SAheart$famhist <- SAheart$famhist == "Present"
head(SAheart)
fit = glmnet( SAheart[,1:9], SAheart[,10])
SAheart[,1:9]
SAheart$famhist <- SAheart$famhist +0
fit = glmnet( SAheart[,1:9], SAheart[,10])
head(SAheart)
head(SAheart[,1:9])
head(as.matrix(SAheart[,1:9]))
fit = glmnet( as.matrix(SAheart[,1:9]), as.matrix( SAheart[,10]))
fit
coef(fit,s=0.1)
coef(fit,s=0.5)
coef(fit,s=0.7)
coef(fit,s=0.01)
coef(fit,s=0.05)
coef(fit,s=0.001)
coef(fit,s=0.00)
coef(fit,s=0.60)
head(SAheart)
install.packages("manipulate")
install.packages(c("AER", "BH", "boot", "car", "class", "cluster", "coda", "codetools", "colorspace", "digest", "dplyr", "foreign", "Formula", "ggplot2", "inline", "KernSmooth", "lattice", "lazyeval", "magrittr", "manipulate", "MASS", "Matrix", "maxLik", "mgcv", "nlme", "nnet", "plyr", "RColorBrewer", "Rcpp", "RcppEigen", "reshape2", "rjags", "rpart", "sandwich", "spatial", "stringr", "survival", "waveslim", "zoo"), lib="C:/R/R-3.1.1/library")
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
try(hellofun())
#' This is a special R script which can be used to generate a report. You can
#' write normal text in roxygen comments.
#'
#' First we set up some options (you do not have to do this):
library(inline)
library(Rcpp)
library(inline)
library(Rcpp)
src <- '
std::vector<std::string> s;
s.push_back("hello");
s.push_back("world");
return Rcpp::wrap(s);
'
hellofun <- cxxfunction(body = src, includes = '', plugin = 'Rcpp', verbose = FALSE)
test <- try(hellofun())
if(inherits(test, "try-error")) stop("hello world failed; ask for help on Rcpp list")
install.packages("rstan", type = 'source')
options(repos = c(getOption("repos"),
+           rstan = "http://rstan.org/repo/"))
install.packages("rstan", type = 'source')
options(repos = c(getOption("repos"),
rstan = "http://rstan.org/repo/"))
install.packages("rstan", type = 'source')
ver
Sys.getenv('PATH')
system('g++ -v')
system('where make')
library(inline)
library(Rcpp)
src <- '
std::vector<std::string> s;
s.push_back("hello");
s.push_back("world");
return Rcpp::wrap(s);
'
hellofun <- cxxfunction(body = src, includes = '', plugin = 'Rcpp', verbose = FALSE)
test <- try(hellofun())
if(inherits(test, "try-error")) stop("hello world failed; ask for help on Rcpp list")
options(repos = c(getOption("repos"),
rstan = "http://rstan.org/repo/"))
install.packages("rstan", type = 'source')
library(inline)
library(Rcpp)
src <- '
std::vector<std::string> s;
s.push_back("hello");
s.push_back("world");
return Rcpp::wrap(s);
'
hellofun <- cxxfunction(body = src, includes = '', plugin = 'Rcpp', verbose = FALSE)
test <- try(hellofun())
if(inherits(test, "try-error")) stop("hello world failed; ask for help on Rcpp list")
options(repos = c(getOption("repos"),
rstan = "http://rstan.org/repo/"))
install.packages("rstan", type = 'source')
version
library(inline)
Sys.getenv("PATH")
system('g++ -v')
system('where make')
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
install_rstan()
install.packages(c("inline", "BH", "RcppEigen"))
install.packages("BH)
"
)
install.packages("BH")
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
install_rstan()
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
?install.packages
library(Rccp)
install.packages('Rccp')
version
# Created: 6/1/2015
rm(list=ls())
time.begin <- Sys.time()
read.directory <- 'L:/PPNR-CCAR Model Development/2015 Aug/Revenue/AIG Level/lm'
setwd(directory)
# Created: 6/1/2015
rm(list=ls())
time.begin <- Sys.time()
read.directory <- 'L:/PPNR-CCAR Model Development/2015 Aug/Revenue/AIG Level/lm'
rate <- as.matrix(read.csv(file.path(read.directory, 'data/AIG.LOB.Rate.csv'), header=TRUE,row.names = 1))
line.names <- colnames(rate)
write.directory<- file.path( read.directory, 'script.lm2-shahriar-output')
# Created: 6/1/2015
rm(list=ls())
time.begin <- Sys.time()
read.directory <- 'L:/PPNR-CCAR Model Development/2015 Aug/Revenue/AIG Level/lm'
write.directory<- file.path( read.directory, 'script.lm2-shahriar-output')
#flag.dic = FALSE
rate <- as.matrix(read.csv(file.path(read.directory, 'data/AIG.LOB.Rate.csv'), header=TRUE,row.names = 1))
line.names <- colnames(rate)
rate.growth <- diff(log(rate))
names(dimnames(rate.growth)) <- c('Year','AIG_LOB')
rate.growth.melt <- melt(rate.growth)
colnames(rate.growth.melt) <- c('Year','AIG_LOB','AIG_LOB_Rate')
EV <- read.csv( file.path(read.directory,'data/EV.csv'), header=TRUE)
EV.names <- colnames(EV)[-1]
ind.LOB.rate <- read.csv(file.path(read.directory,'data/Ind.LOB.Rate.observed.ngdp.csv'), header=TRUE)
ind.LOB.rate.melt<-melt(ind.LOB.rate, id.vars = "Year")
colnames(ind.LOB.rate.melt) <- c('Year', 'Ind_LOB', 'Ind_LOB_Rate')
ind.LOB.rate.melt$ID<-paste(ind.LOB.rate.melt$Year, ind.LOB.rate.melt$Ind_LOB, sep = "_")
Mapping <- read.csv(file.path(read.directory,'data/Mapping_v5.csv'), header=TRUE)
#data <- merge(rate.growth.melt, Mapping, by = "AIG_LOB")
data <- merge(rate.growth.melt, Mapping[, c(1,2,3)], by = "AIG_LOB")
data$ID <- paste(data$Year,data$Ind_LOB, sep = "_")
data<-merge(data, ind.LOB.rate.melt, id.vars = "ID")
data<-merge(data, EV, id.vars = "Year")
results<- matrix(0, nrow = ncol(rate.growth), ncol = 17)
rownames(results) <- Mapping[,2]
colnames(results) <- c('R2', 'Adj R2', 'intercept', 'SE intercept', 't intercept', 'beta Ind Rate', 'SE Ind Rate', 't Ind Rate', 'beta VIX', 'SE VIX', 't VIX', 'beta # Cars', 'SE # Cars', 't # Cars', 'beta Swap10', 'SE Swap10', 't Swap10')
# Created: 6/1/2015
library(MASS)
library(reshape2)
library(logspline)
library(dplyr)
library(ggplot2)
rm(list=ls())
time.begin <- Sys.time()
read.directory <- 'L:/PPNR-CCAR Model Development/2015 Aug/Revenue/AIG Level/lm'
write.directory<- file.path( read.directory, 'script.lm2-shahriar-output')
#flag.dic = FALSE
rate <- as.matrix(read.csv(file.path(read.directory, 'data/AIG.LOB.Rate.csv'), header=TRUE,row.names = 1))
line.names <- colnames(rate)
rate.growth <- diff(log(rate))
names(dimnames(rate.growth)) <- c('Year','AIG_LOB')
rate.growth.melt <- melt(rate.growth)
colnames(rate.growth.melt) <- c('Year','AIG_LOB','AIG_LOB_Rate')
EV <- read.csv( file.path(read.directory,'data/EV.csv'), header=TRUE)
EV.names <- colnames(EV)[-1]
ind.LOB.rate <- read.csv(file.path(read.directory,'data/Ind.LOB.Rate.observed.ngdp.csv'), header=TRUE)
ind.LOB.rate.melt<-melt(ind.LOB.rate, id.vars = "Year")
colnames(ind.LOB.rate.melt) <- c('Year', 'Ind_LOB', 'Ind_LOB_Rate')
ind.LOB.rate.melt$ID<-paste(ind.LOB.rate.melt$Year, ind.LOB.rate.melt$Ind_LOB, sep = "_")
Mapping <- read.csv(file.path(read.directory,'data/Mapping_v5.csv'), header=TRUE)
#data <- merge(rate.growth.melt, Mapping, by = "AIG_LOB")
data <- merge(rate.growth.melt, Mapping[, c(1,2,3)], by = "AIG_LOB")
data$ID <- paste(data$Year,data$Ind_LOB, sep = "_")
data<-merge(data, ind.LOB.rate.melt, id.vars = "ID")
data<-merge(data, EV, id.vars = "Year")
results<- matrix(0, nrow = ncol(rate.growth), ncol = 17)
rownames(results) <- Mapping[,2]
colnames(results) <- c('R2', 'Adj R2', 'intercept', 'SE intercept', 't intercept', 'beta Ind Rate', 'SE Ind Rate', 't Ind Rate', 'beta VIX', 'SE VIX', 't VIX', 'beta # Cars', 'SE # Cars', 't # Cars', 'beta Swap10', 'SE Swap10', 't Swap10')
ncol(rate.growth)
rate.growth
i <- 1
Mapping
Mapping[i,4]
lm.formula<- "AIG_LOB_Rate ~ Ind_LOB_Rate"
lm.model<-lm(lm.formula, subset(data, Year>=Start_Year & AIG_LOB ==  as.character(Mapping[i,2])))
summary(lm.model)
lm.model<-lm(lm.formula, subset(data, Year>=Start_Year & AIG_LOB ==  as.character(Mapping[i,2])))
results[i,1] = summary(lm.model)$r.squared
results[i,2] = summary(lm.model)$adj.r.squared
results[i,3] = coef(summary(lm.model))[1,1]
results[i,4] = coef(summary(lm.model))[1,2]
results[i,5] = coef(summary(lm.model))[1,3]
results[i,6] = coef(summary(lm.model))[2,1]
results[i,7] = coef(summary(lm.model))[2,2]
results[i,8] = coef(summary(lm.model))[2,3]
k<-0
write.csv(results,file= file.path(write.directory , 'model.output.ind.obs.ngdp.exp.nodummy.ciab.csv'))
write.csv(results,file= file.path(write.directory , 'model.output.ind.obs.ngdp.exp.nodummy.ciab.shahriar.csv'))
write.csv(data,file=file.path(write.directory,'data.ind.obs.ngdp.exposure.nodummy.ciab.shahriar.csv'))
Start_Year
subset(data, Year>=Start_Year & AIG_LOB ==  as.character(Mapping[i,2])
)
data
names(data)
Start_Year
head( data)
Year
lm.model<-lm(lm.formula, subset(data, Year>= 2000 & AIG_LOB ==  as.character(Mapping[i,2])))
results[i,1] = summary(lm.model)$r.squared
lm.model
source('L:/PPNR-CCAR Model Development/2015 Aug/Revenue/AIG Level/lm/script.lm2-shahriar.R')
summary(lm.model)
coef(summary(lm.model))[1,1]
coef(summary(lm.model))[1,2]
coef(summary(lm.model))[1,1]
i=1
lm.model<-lm(lm.formula, subset(data, Year>= 2000 & AIG_LOB ==  as.character(Mapping[i,2]))) #  2000 was start year
results[i,1] = summary(lm.model)$r.squared
summary(lm.model)
summary(lm.model)$r.squared
coef(summary(lm.model))[1,1]
coef(summary(lm.model))[1,2]
coef(summary(lm.model))[2,1]
source('L:/PPNR-CCAR Model Development/2015 Aug/Revenue/AIG Level/lm/script.lm2-shahriar.R')
View(data)
select(data, AIG_LOB== 'DNONAT')
select(data, AIG_LOB== "DNONAT")
select(data, AIG_LOB== "DNONat")
select(data, data$AIG_LOB== "DNONat")
filter(data, AIG_LOB == 'DNONat')
filter(data, AIG_LOB == as.character('DNONat'))
select(data, data$AIG_LOB== as.character("DNONat"))
select(data,AIG_LOB==as.character("DNONat"))
select(data,data$AIG_LOB==as.character("DNONat"))
select(data,data$AIG_LOB== "1")
names(data
)
head(data$AIG_LOB)
select(data,as.character(data$AIG_LOB)== "DNONat")
select(data,data$AIG_LOB== as.factor("DNONat"))
ind.LOB.rate
versions
version
library(rjagsSH)
rm(list=ls())
library(MASS)
library(reshape2)
library(logspline)
library(zoo)
library(rjags)
library(rjagsSH)
library(ggplot2)
library(dplyr)
library(tidyr)
rm(list=ls())
library(MASS)
library(reshape2)
library(logspline)
library(zoo)
library(rjags)
library(rjagsSH)
library(ggplot2)
library(dplyr)
library(tidyr)
time.begin <- Sys.time()
directory <- 'H:/jags-store/nbin2'
setwd(directory)
# unlink("plots/*.emf")
# unlink("plots/diagnosis/*.emf")
sold.history <- read.delim("H:/jags-store/homework_singlecopy.tsv")
sold.history <- sold.history %>%
filter(sold > -1)
sold.history$date <- as.Date.factor(sold.history$date)
# # following to see what day of week it is, can we alreasy track it? Yes
# weekdays.tracking <-
#   sold.history %>%
#   mutate( weekday = weekdays(date)) %>%
#   ungroup() %>%
#   select(bipad, weekday) %>%
#   distinct()
# draws have been always greater than sold
check.draws <-
sold.history %>%
filter(!is.na(draws)) %>%
filter( draws < sold)
sold.history.weekday <-
sold.history %>%
filter(!is.na(draws)) %>%
mutate(week.day =as.numeric(c("90076"=7, "90016"=1,
"90026"=2, "90036"=3,
"90046"=4, "90056"=5,
"90066"=6  )[as.character(bipad)]))
Starting.date <- min( sold.history$date)
sold.history.weekday.M <-
sold.history.weekday %>%
mutate(N.days = as.numeric( date - Starting.date )) %>%
select( -date,-bipad) %>%
arrange(N.days)
# draws.history.weekday.M <-
#   sold.history.weekday %>%
#   mutate(N.days = as.numeric( date - Starting.date )) %>%
#   select( -sold,-bipad) %>%
#   spread(account, draws) %>%
#   arrange(date)
jags.data <- list()
#temp[ is.na(temp) ] <- 0
jags.data$sold <- as.numeric( sold.history.weekday.M$sold)
jags.data$week.day <- as.numeric( sold.history.weekday.M$week.day)
jags.data$N.week.day <- length(unique(jags.data$week.day)) # expect 7, number of days in week
#jags.data$day <- as.matrix( sold.history.weekday.M[, c(9)])
jags.data$N.accounts <- length(unique(sold.history.weekday.M$account))
jags.data$account <- as.numeric(sold.history.weekday.M$account)
jags.data$N.N.days <- length(unique(sold.history.weekday.M$N.days))
jags.data$N.days <- as.numeric(sold.history.weekday.M$N.days)
jags.data$draws <- as.numeric( sold.history.weekday.M$draws)
jags.data$L <- dim(sold.history.weekday.M)[1]
JAGS <- FALSE
if (JAGS){
set.seed(777)
sh.jm <- sh.jags.model('NYTmodel_negbin.txt',
data=jags.data,
n.chains=3,
n.adapt=4.0E+2) #1.0E+4
sh.jags.update(sh.jm,1.0E+3) #1.0E+4
samples <- sh.jags.samples(sh.jm,
c( 'p','r','m' ),
n.iter=4.0E+3, #1.0E+5
thin=5.0E+1)
save(samples,file=paste("samples_negbin2.RData",sep=""))
} else{
load("samples_negbin.RData")
message('Finished Loading')
}
print(Sys.time()-time.begin)
rm(list=ls())
library(MASS)
library(reshape2)
library(logspline)
library(zoo)
library(rjags)
library(rjagsSH)
library(ggplot2)
library(dplyr)
library(tidyr)
time.begin <- Sys.time()
directory <- 'H:/jags-store/nbin2'
setwd(directory)
# unlink("plots/*.emf")
# unlink("plots/diagnosis/*.emf")
sold.history <- read.delim("H:/jags-store/homework_singlecopy.tsv")
sold.history <- sold.history %>%
filter(sold > -1)
sold.history$date <- as.Date.factor(sold.history$date)
# # following to see what day of week it is, can we alreasy track it? Yes
# weekdays.tracking <-
#   sold.history %>%
#   mutate( weekday = weekdays(date)) %>%
#   ungroup() %>%
#   select(bipad, weekday) %>%
#   distinct()
# draws have been always greater than sold
check.draws <-
sold.history %>%
filter(!is.na(draws)) %>%
filter( draws < sold)
sold.history.weekday <-
sold.history %>%
filter(!is.na(draws)) %>%
mutate(week.day =as.numeric(c("90076"=7, "90016"=1,
"90026"=2, "90036"=3,
"90046"=4, "90056"=5,
"90066"=6  )[as.character(bipad)]))
Starting.date <- min( sold.history$date)
sold.history.weekday.M <-
sold.history.weekday %>%
mutate(N.days = as.numeric( date - Starting.date )) %>%
select( -date,-bipad) %>%
arrange(N.days)
# draws.history.weekday.M <-
#   sold.history.weekday %>%
#   mutate(N.days = as.numeric( date - Starting.date )) %>%
#   select( -sold,-bipad) %>%
#   spread(account, draws) %>%
#   arrange(date)
jags.data <- list()
#temp[ is.na(temp) ] <- 0
jags.data$sold <- as.numeric( sold.history.weekday.M$sold)
jags.data$week.day <- as.numeric( sold.history.weekday.M$week.day)
jags.data$N.week.day <- length(unique(jags.data$week.day)) # expect 7, number of days in week
#jags.data$day <- as.matrix( sold.history.weekday.M[, c(9)])
jags.data$N.accounts <- length(unique(sold.history.weekday.M$account))
jags.data$account <- as.numeric(sold.history.weekday.M$account)
jags.data$N.N.days <- length(unique(sold.history.weekday.M$N.days))
jags.data$N.days <- as.numeric(sold.history.weekday.M$N.days)
jags.data$draws <- as.numeric( sold.history.weekday.M$draws)
jags.data$L <- dim(sold.history.weekday.M)[1]
JAGS <- FALSE
if (JAGS){
set.seed(777)
sh.jm <- sh.jags.model('NYTmodel_negbin.txt',
data=jags.data,
n.chains=3,
n.adapt=4.0E+2) #1.0E+4
sh.jags.update(sh.jm,1.0E+3) #1.0E+4
samples <- sh.jags.samples(sh.jm,
c( 'p','r','m' ),
n.iter=4.0E+3, #1.0E+5
thin=5.0E+1)
save(samples,file=paste("samples_negbin2.RData",sep=""))
} else{
load("samples_negbin2.RData")
message('Finished Loading')
}
print(Sys.time()-time.begin)
names(samples)
dim(samples$m)
dim(samples$p)
dim(samples$r)
p.mean<-apply(samples$p,1:2,mean)
p.median<-apply(samples$p,1:2,median)
p.sd<-apply(samples$p,1:2,sd)
p.mean
p.median
dim(samples$p)
dim(samples$r)
samples$r[1,1,,]
names(samples)
p.mean<-apply(samples$p,1:2,mean)
p.median<-apply(samples$p,1:2,median)
p.sd<-apply(samples$p,1:2,sd)
r.mean<-apply(samples$r,1:2,mean)
r.median<-apply(samples$r,1:2,median)
r.sd<-apply(samples$r,1:2,sd)
m.mean<-apply(samples$m,1:2,mean)
m.median<-apply(samples$m,1:2,median)
m.sd<-apply(samples$m,1:2,sd)
p.mean
r.mean
r.median
m.sd
for(j in 1:dim(samples$p)[1])
for(i in 1:dim(samples$p)[1]){
png(paste("plots/diagnosis/p.",j,"-",i,".trace.png",sep=""),
width = 6.4, height = 12, units = "in", res = 600 )
par(mfrow=c(2,1))
matplot(samples$p[j,i,,],type='l',xlab="Iteration")
plot(density(samples$p[j,i,,]))
dev.off()
}
r.mean
